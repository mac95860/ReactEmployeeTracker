{"version":3,"sources":["components/Header/Header.js","components/Input/input.js","components/TableBody/TableBody.js","components/TableHead/TableHead.js","utils/API.js","components/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Input","handleInputChange","id","width","height","viewBox","fill","xmlns","fill-rule","d","onChange","e","type","aria-label","aria-describedby","placeholder","TableBody","cell","picture","name","email","location","key","scope","src","thumbnail","alt","first","last","city","state","TableHead","results","sortUsers","onClick","map","axios","get","Container","users","sortByName","sort","a","b","firstName","secondName","setState","value","target","searchUser","filter","user","Object","values","join","toLowerCase","indexOf","API","then","data","catch","err","console","log","this","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9de37edd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className = \"display-2 p-3\">Employee Tracking</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n\r\n","import React from \"react\";\r\n\r\nfunction Input({handleInputChange}) {\r\n    return (\r\n        <div className=\"input-group my-3 w-25\">\r\n            <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">\r\n                    <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-search\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path fill-rule=\"evenodd\" d=\"M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z\" />\r\n                        <path fill-rule=\"evenodd\" d=\"M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z\" />\r\n                    </svg>\r\n                </span>\r\n            </div>\r\n            <input onChange={e => handleInputChange(e)} type=\"text\" className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" placeholder=\"Employee's name\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;","import React from \"react\";\r\n\r\nfunction TableBody({ cell, picture, name, email, location }) {\r\n\r\n    return (\r\n\r\n        <tr key={cell}>\r\n             <td scope=\"row\" >\r\n                <img src={picture.thumbnail} alt=\"employee pic\" />\r\n            </td> \r\n            <td>{name.first} { name.last }</td>\r\n            <td>{email}</td>\r\n            <td>{cell}</td>\r\n            <td>{location.city}</td>\r\n            <td>{location.state}</td> \r\n        </tr>\r\n\r\n    )\r\n}\r\n\r\nexport default TableBody;","import React  from \"react\";\r\nimport TableBody from '../TableBody/TableBody';\r\n\r\nfunction TableHead({results, sortUsers}) {\r\n   \r\n    return (\r\n        <table className=\"table table-hover\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\">id</th>\r\n                    <th scope=\"col\" onClick={(e) => sortUsers(e)}>name</th>\r\n                    <th scope=\"col\">email</th>\r\n                    <th scope=\"col\">cell</th>\r\n                    <th scope=\"col\">City</th>\r\n                    <th scope=\"col\">State</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                results.map(({cell, name, picture, location, email}) => {\r\n                    return <TableBody\r\n                                cell={cell}\r\n                                name={name}\r\n                                location={location}\r\n                                picture={picture}\r\n                                email={email}\r\n                                />\r\n                })\r\n            }   \r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default TableHead;","import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};","import React, { Component } from 'react';\r\nimport Input from '../Input/input';\r\nimport TableHead from '../TableHead/TableHead';\r\nimport API from \"../../utils/API\";\r\n\r\n\r\nclass Container extends Component {\r\n    state = {\r\n        results: null,\r\n        users: null,\r\n    }\r\n\r\n    sortUsers = () => {\r\n        const sortByName = this.state.results.sort(\r\n            function sortedNames(a, b) {\r\n                const firstName = a.name;\r\n                const secondName = b.name;\r\n                if (firstName > secondName) {\r\n                    return 1;\r\n                } else if (firstName < secondName) {\r\n                    return -1\r\n                } else if (firstName === secondName) {\r\n                    return 0\r\n                }\r\n            }\r\n        )\r\n        return this.setState({ results: sortByName });\r\n    }\r\n\r\n    handleInputChange = e => {\r\n        const value = e.target.value;\r\n        const searchUser = this.state.results.filter(user => {\r\n            let values = Object.values(user)\r\n                .join(\"\")\r\n                .toLowerCase();\r\n            return values.indexOf(value.toLowerCase()) !== -1;\r\n        })\r\n        this.setState({\r\n            users: searchUser\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.getUsers()\r\n            .then(({ data }) => {\r\n                this.setState({\r\n                    results: data.results,\r\n                    users: data.results\r\n                });\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render() {\r\n        const results = this.state.users;\r\n        return (\r\n            <div className=\"container d-flex justify-content-center flex-column\">\r\n                <Input handleInputChange={this.handleInputChange} />\r\n                {results && <TableHead results={results} sortUsers={this.sortUsers} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Container;","import React, {Component} from 'react';\nimport Header from './components/Header/Header';\nimport Container from './components/Container/Container'\n\nclass App extends Component {\n  render() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}